EX2
#include <iostream>
using namespace std;

void sort(char input[], int size) {				//Insertion sort function.
	int i, j, temp;
	for (i = 1; i < size; i++) {
		j = i;
		while (j > 0 && input[j - 1] > input[j]) {
			temp = input[j];
			input[j] = input[j - 1];
			input[j - 1] = temp;
			j--;
		}
	}
}
int main() {
	char* str = new char();
	cout << "Enter a String: ";
	cin >> str;
	cout << "Size: " << strlen(str) << endl;		//strlen gets the size of the string.
	cout << "Unsorted input:" << endl;
	cout << str << endl;
	sort(str, strlen(str));							//Function call, insertion sort.
	cout << "Sorted input:" << endl << str << endl;
}
------------------------------------------------------------------------------------------------------------
EX4
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main(int argc, char* argv[]) {
	cout << "Enter the name of the file: ";
	string filename;
	cin >> filename;
	ifstream myfile;
	myfile.open(filename);
	int n;
	myfile >> n;
	int * numbersArray = new int[n];

	for (int i = 0; i < n; i++) {						//Writes the values into an array.
		myfile >> numbersArray[i];
	}
	cout << "Enter 'min' , 'max' or an integer number: ";
	string number;
	cin >> number;
	int max = numbersArray[0];
	int min = numbersArray[0];
	int position;

	if (number == "max")								//Checks for the maximum number.
	{						
		for (int i = 0; i < n; i++) {
			if (max < numbersArray[i]) {
				max = numbersArray[i];
				position = i;
			}
		}
		cout << "Read 1000 numbers. Maximum number " << max << " found at position " << position;
	}

	else if (number == "min")							//Checks for the minimum number.
	{					
		for (int i = 0; i < n; i++) {
			if (min > numbersArray[i]) {
				min = numbersArray[i];
				position = i;
			}
		}
		cout << "Read 1000 numbers. Minimum number " << min << " found at position " << position;
	}

	else
	{
		int b = stoi(number);							//Converts string into an integer.
		for (int i = 0; i < n; i++) {
			if (b == numbersArray[i])
			cout << "Read 1000 numbers. Number " << number << " found at index " << i;
		}
	}
}
