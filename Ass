EX1
#include <iostream>
#include "time.h"
#include <algorithm>
#include "timer.h"
using namespace std;

const int MAX_INTEGER = 10000000; // 10M
const int NUMBERS_SIZE = 1000000;  // 1M
const int LOOPS = 1000000;  // 1M

int* createArrayWithRandomIntegers(int size)
{
	/* ADD YOUR CODE HERE */
	int* random = new int[size];
	for (int i = 0; i < size; i++) {
		random[i] = rand();
	}
	return random;
}

int binarySearchIterative(int* a, int i_min, int i_max, int key)
{
	/* ADD YOUR CODE HERE */
	while (i_min <= i_max)
	{
		int middle = i_min + (i_max - i_min) / 2;
		if (key < a[middle])
		{
			i_max = middle - 1;
		}
		else if (key > a[middle])
		{
			i_min = middle + 1;
		}
		else 
		{
			return middle;	//found.
			
		}
	}
	return -1;	//not found.
	
}

int binarySearchRecursive(int* a, int i_min, int i_max, int key)
{
	/* ADD YOUR CODE HERE */
	if (i_min <= i_max) {
		int middle = i_min + (i_max - i_min) / 2;
		if (a[middle] > key)
			return binarySearchRecursive(a, i_min, middle - 1, key);
		else if (a[middle] < key)
			return binarySearchRecursive(a, middle + 1, i_max, key);
		else
			return middle; // found.
	}
	return -1;
}


int main()
{
	srand(time(NULL));			 // randomize

					   
	int* numbers = createArrayWithRandomIntegers(NUMBERS_SIZE);			// create the array with random values
	sort(numbers, numbers + NUMBERS_SIZE); // sort the numbers

	cout << "BINARY SEARCH - ITERATIVE" << endl;
	for (int i = 1000; i <= NUMBERS_SIZE; i *= 2)
	{
		double start_time, finish_time, elapsed;

		int* keys = createArrayWithRandomIntegers(LOOPS);
		GET_TIME(start_time);
		for (int j = 0; j < LOOPS; j++) // timed code
		{
			binarySearchIterative(numbers, 0, i - 1, keys[j]);
		}

		GET_TIME(finish_time);

		elapsed = finish_time - start_time;
		cout << i << ": " << elapsed << endl;
	}

	cout << "BINARY SEARCH - RECURSIVE" << endl;
	/* ADD YOUR CODE HERE â€“ Hint: it will be very similar to the above */
	for (int i = 1000; i <= NUMBERS_SIZE; i *= 2)
	{
		double start_time, finish_time, elapsed;

		int* keys = createArrayWithRandomIntegers(LOOPS);
		GET_TIME(start_time);
		for (int j = 0; j < LOOPS; j++) // timed code
		{
			binarySearchRecursive(numbers, 0, i - 1, keys[j]);
		}

		GET_TIME(finish_time);

		elapsed = finish_time - start_time;
		cout << i << ": " << elapsed << endl;
	}
}
--------------------------------------------------------------------------------------------------------------------------------
EX2
#include <iostream>
using namespace std;

void sort(char input[], int size) {				//Insertion sort function.
	int i, j, temp;
	for (i = 1; i < size; i++) {
		j = i;
		while (j > 0 && input[j - 1] > input[j]) {
			temp = input[j];
			input[j] = input[j - 1];
			input[j - 1] = temp;
			j--;
		}
	}
}
int main() {
	char* str = new char();
	cout << "Enter a String: ";
	cin >> str;
	cout << "Size: " << strlen(str) << endl;		//strlen gets the size of the string.
	cout << "Unsorted input:" << endl;
	cout << str << endl;
	sort(str, strlen(str));							//Function call, insertion sort.
	cout << "Sorted input:" << endl << str << endl;
}
--------------------------------------------------------------------------------------------------------------------------------
EX3
#include <iostream>
using namespace std;

void oddNumber(bool &flag, int number) {
	if (number % 2 == 1) {
		flag = false;
	}
}

void primeNumber(bool &flag2, int number) {
	bool prime = true;
	if (number == 1)				//In order to include number 1.
		return;

	for (int i = 2; i*i <= number; i++)
	{
		
		if (number % i == 0)
		{
			prime = false;
			break;
		}
	}
	if (prime) flag2 = false;
	}
	

int main() {
	int a, b, c;
	cout << "Enter Number Range: ";
	cin >> a;
	cout << "Enter 0 to include or 1 to skip ODD numbers: ";
	cin >> b;
	cout << "Enter 0 to include or 1 to skip PRIME numbers: ";
	cin >> c;
	bool flag = false;
	for (int i = 1; i <= a; i++) {
		flag = true;
		if (b == 1) {
			oddNumber(flag, i);
		}
		
		if (c == 1) {
			primeNumber(flag, i);
		}

		 if (flag)
			 cout << i << " ";
	}
}
--------------------------------------------------------------------------------------------------------------------------------
EX4
#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main(int argc, char* argv[]) {
	cout << "Enter the name of the file: ";
	string filename;
	cin >> filename;
	ifstream myfile;
	myfile.open(filename);
	int n;
	myfile >> n;
	int * numbersArray = new int[n];

	for (int i = 0; i < n; i++) {						//Writes the values into an array.
		myfile >> numbersArray[i];
	}
	cout << "Enter 'min' , 'max' or an integer number: ";
	string number;
	cin >> number;
	int max = numbersArray[0];
	int min = numbersArray[0];
	int position;

	if (number == "max")								//Checks for the maximum number.
	{						
		for (int i = 0; i < n; i++) {
			if (max < numbersArray[i]) {
				max = numbersArray[i];
				position = i;
			}
		}
		cout << "Read 1000 numbers. Maximum number " << max << " found at position " << position;
	}

	else if (number == "min")							//Checks for the minimum number.
	{					
		for (int i = 0; i < n; i++) {
			if (min > numbersArray[i]) {
				min = numbersArray[i];
				position = i;
			}
		}
		cout << "Read 1000 numbers. Minimum number " << min << " found at position " << position;
	}

	else
	{
		int b = stoi(number);							//Converts string into an integer.
		for (int i = 0; i < n; i++) {
			if (b == numbersArray[i])
			cout << "Read 1000 numbers. Number " << number << " found at index " << i;
		}
	}
}
