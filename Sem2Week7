Ex1
#include <iostream>
using namespace std;

int main() {
	int x, y;
	int* p;
	int* q;

	x = 2;
	y = 8;
	p = &x;
	q = &y;
	cout << "Address of x: " << &x << " Value of x: " << x << endl;
	cout << "Dereference of p: " << *p << " Value of p: " << p << endl;
	cout << "Address of y: " << &y << " Value of y: " << y << endl;
	cout << "value of q: " << q << " Dereference of q: " << *q << endl;
	cout << "Address of p: " << &p << endl;
	cout << "Address of q: " << &q << endl;
}
--------------------------------------------------------------------------------------------------------------------------------
Ex2
#include <iostream>
using namespace std;

int main() {
	int x, y, z;
	int* p;
	int* q;
	int* r;

	x = 4;
	y = 8;
	z = 5;
	p = &x;
	q = &y;
	r = &z;
	cout << " Value of x: " << x << endl;
	cout << " Value of y: " << y << endl;
	cout << " Value of z: " << z << endl;

	cout << " Value of p: " << p << endl;
	cout << " Value of q: " << q << endl;
	cout << " Value of r: " << r << endl;

	cout << " Dereference of p: " << *p << endl;
	cout << " Dereference of q: " << *q << endl;
	cout << " Dereference of r: " << *r << endl;

	//SWAPPED
	cout << "Swapping Values" << endl;
	int temp = z;
	z = x;
	x = y;
	y = temp;

	cout << " Value of x: " << x << endl;
	cout << " Value of y: " << y << endl;
	cout << " Value of z: " << z << endl;

	cout << " Value of p: " << p << endl;
	cout << " Value of q: " << q << endl;
	cout << " Value of r: " << r << endl;

	cout << " Dereference of p: " << *p << endl;
	cout << " Dereference of q: " << *q << endl;
	cout << " Dereference of r: " << *r << endl;


}
--------------------------------------------------------------------------------------------------------------------------------
Ex3
#include <iostream>
using namespace std;

int main() {
	int x, y, z;
	int* p;
	int* q;
	int* r;

	x = 4;
	y = 8;
	z = 5;
	p = &x;
	q = &y;
	r = &z;
	cout << " Value of x: " << x << endl;
	cout << " Value of y: " << y << endl;
	cout << " Value of z: " << z << endl;

	cout << " Value of p: " << p << endl;
	cout << " Value of q: " << q << endl;
	cout << " Value of r: " << r << endl;

	cout << " Dereference of p: " << *p << endl;
	cout << " Dereference of q: " << *q << endl;
	cout << " Dereference of r: " << *r << endl;

	//SWAPPED
	cout << "Swapping Pointers" << endl;
	int* temp = r;
	r = p;
	p = q;
	q = temp;

	cout << " Value of x: " << x << endl;
	cout << " Value of y: " << y << endl;
	cout << " Value of z: " << z << endl;

	cout << " Value of p: " << p << endl;
	cout << " Value of q: " << q << endl;
	cout << " Value of r: " << r << endl;

	cout << " Dereference of p: " << *p << endl;
	cout << " Dereference of q: " << *q << endl;
	cout << " Dereference of r: " << *r << endl;


}
--------------------------------------------------------------------------------------------------------------------------------
Ex4
#include <iostream>
using namespace std;

struct Module {
	char* name;
	int enrollment;
	double average_mark;
};

int main() {
	Module* co1406 = new Module;
	Module* co1407 = new Module;
	co1406->name = "co1406";
	co1406->enrollment = 15;
	co1406->average_mark = 78.9;

	co1407->name = "co1407";
	co1407->enrollment = 12;
	co1407->average_mark = 67.8;

	cout << "sizeof(Module): " << sizeof Module << endl;
	cout << co1406->name << ", " << co1406->enrollment << ", " << co1406->average_mark << endl;
	cout << co1407->name << ", " << co1407->enrollment << ", " << co1407->average_mark << endl;
}
--------------------------------------------------------------------------------------------------------------------------------
Ex6
#include <iostream>
using namespace std;
double * maximum(double *numbers, int size)
{
	double* max = &numbers[0];
	for (int i = 0; i < size; i++) {
		if (numbers[i] > *max)
			*max = numbers[i];
	}
	return max;
		
}
int main()
{
	const int size_numbers = 6;
	double numbersArray[size_numbers] = { 2.34, 4.33, 3.45, 12.35, 56.34, 1.22 };
	double *numbers = numbersArray;
	cout << "Address: " << maximum(numbers, size_numbers) << endl;
	cout << "Value: " << *(maximum(numbers, size_numbers)) << endl;
}
